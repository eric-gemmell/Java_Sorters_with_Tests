 $$$$$$\  $$$$$$$$\ $$\      $$\ $$\      $$\ $$$$$$$$\ $$\       $$\             $$$$$$$$\ $$$$$$$\  $$$$$$\  $$$$$$\  
$$  __$$\ $$  _____|$$$\    $$$ |$$$\    $$$ |$$  _____|$$ |      $$ |            $$  _____|$$  __$$\ \_$$  _|$$  __$$\ 
$$ /  \__|$$ |      $$$$\  $$$$ |$$$$\  $$$$ |$$ |      $$ |      $$ |            $$ |      $$ |  $$ |  $$ |  $$ /  \__|
$$ |$$$$\ $$$$$\    $$\$$\$$ $$ |$$\$$\$$ $$ |$$$$$\    $$ |      $$ |            $$$$$\    $$$$$$$  |  $$ |  $$ |      
$$ |\_$$ |$$  __|   $$ \$$$  $$ |$$ \$$$  $$ |$$  __|   $$ |      $$ |            $$  __|   $$  __$$<   $$ |  $$ |      
$$ |  $$ |$$ |      $$ |\$  /$$ |$$ |\$  /$$ |$$ |      $$ |      $$ |            $$ |      $$ |  $$ |  $$ |  $$ |  $$\ 
\$$$$$$  |$$$$$$$$\ $$ | \_/ $$ |$$ | \_/ $$ |$$$$$$$$\ $$$$$$$$\ $$$$$$$$\       $$$$$$$$\ $$ |  $$ |$$$$$$\ \$$$$$$  |
 \______/ \________|\__|     \__|\__|     \__|\________|\________|\________|      \________|\__|  \__|\______| \______/ 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    ___  ________  ___      ___ ________          ________  ________  ________  _________  _______   ________  ________           ________  _______   ________  ________  ________  _________   
   |\  \|\   __  \|\  \    /  /|\   __  \        |\   ____\|\   __  \|\   __  \|\___   ___\\  ___ \ |\   __  \|\   ____\         |\   __  \|\  ___ \ |\   __  \|\   __  \|\   __  \|\___   ___\ 
   \ \  \ \  \|\  \ \  \  /  / | \  \|\  \       \ \  \___|\ \  \|\  \ \  \|\  \|___ \  \_\ \   __/|\ \  \|\  \ \  \___|_        \ \  \|\  \ \   __/|\ \  \|\  \ \  \|\  \ \  \|\  \|___ \  \_| 
 __ \ \  \ \   __  \ \  \/  / / \ \   __  \       \ \_____  \ \  \\\  \ \   _  _\   \ \  \ \ \  \_|/_\ \   _  _\ \_____  \        \ \   _  _\ \  \_|/_\ \   ____\ \  \\\  \ \   _  _\   \ \  \  
|\  \\_\  \ \  \ \  \ \    / /   \ \  \ \  \       \|____|\  \ \  \\\  \ \  \\  \|   \ \  \ \ \  \_|\ \ \  \\  \\|____|\  \        \ \  \\  \\ \  \_|\ \ \  \___|\ \  \\\  \ \  \\  \|   \ \  \ 
\ \________\ \__\ \__\ \__/ /     \ \__\ \__\        ____\_\  \ \_______\ \__\\ _\    \ \__\ \ \_______\ \__\\ _\ ____\_\  \        \ \__\\ _\\ \_______\ \__\    \ \_______\ \__\\ _\    \ \__\
 \|________|\|__|\|__|\|__|/       \|__|\|__|       |\_________\|_______|\|__|\|__|    \|__|  \|_______|\|__|\|__|\_________\        \|__|\|__|\|_______|\|__|     \|_______|\|__|\|__|    \|__|
                                                    \|_________|                                                 \|_________|                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
How To Run:
-----------

In order to get time specifications please run Sorter_Test.java in Eclipse, it is set up with JUnit and prints the speed results to the console for the multiple supplied txt files.

Here is an example output:
------------------------------------------------------------------------
------------------------------------------------------------------------
MedianQuickSorter Sorter Sort Speeds (nanoseconds):

[10]: 20007
[50]: 34126
[100]: 91398
[1000]: 829663

QuickCutOffSorter Sorter Sort Speeds (nanoseconds):

[10]: 27089
[50]: 41578
[100]: 101313
[1000]: 886566

InsertSorter Sorter Sort Speeds (nanoseconds):

[10]: 9219
[50]: 3189
[100]: 10097
[1000]: 776546

SelectionSorter Sorter Sort Speeds (nanoseconds):

[10]: 16790
[50]: 52221
[100]: 211112
[1000]: 4597704

QuickSorter Sorter Sort Speeds (nanoseconds):

[10]: 3965
[50]: 8846
[100]: 19125
[1000]: 222751

ThreeWayQuickSort Sorter Sort Speeds (nanoseconds):

[10]: 11373
[50]: 63622
[100]: 96983
[1000]: 664972

MergeSorter Sorter Sort Speeds (nanoseconds):

[10]: 8297
[50]: 36703
[100]: 78599
[1000]: 735480
------------------------------------------------------------------------
------------------------------------------------------------------------

Part1 
-----

Question d)
-----------
3 Way Quick Sort works the following way:

First we must concern ourselves with partitioning an array, following is an explanation for 3 way partitioning an array:

int pivot 
	the value arround which the array will be split

int i
	Index of the last integer in the array lesser than the pointer. All values in the array before i are smaller than pivot. 

int j 
	Index of the first integer in the array greater than the pointer. All values in the array after j are larger than pivot.

int[] A
	the Array to be sorted

pivot is initialized to the last element of the array for simplicity, but this can be changed.
int i = p -1 where p is the first element of the array we want to partition, if the whole array is partitioned, p is 0.
int j = r +1 where r is the last element of the array we want to partition, if the whole array is partitioned, r is the length of the array -1 

These values for i and j imply that we do not have any sorted elements at the begining.

Then we recurively iterate through each element of the array, using an index x. If A[x] is smaller than the pivot, we increase i by one, since we have one more value smaller than pivot, and we Swap A[i] and A[x]. 
If A[x] is bigger than pivot then we decrease j by 1, since we have one more value greater than pivot, we swap A[j] and A[x] and we must decrease x by one since the value we just swaped for isn't necessarily smaller than the pivot.
If A[x] and pivot are equal we don't do anything.
We stop iterating once we know that all elements are around the pivot, meaning that x is greater or equal to j, since all elements at and after j are larger than pivot.

We return i and j-1, the boundries delimiting the values equal to the pivot, so that we can then recursively partition the two halves. The values equal to pivot are already sorted.

In Sudo Code:

int[] Partition(Array A,int p, int r) {
	pivot = A[r]
	i = p-1
	j = r+1
	for(int x = p; x < j; x++) {
		if(A[x]<pivot) {
			i++
			Swap(A[i],A[x])
		}
		else if(A[x]>pivot) {
			j--
			Swap(A[j],A[x])
			x--
		}
	}
	return i and j-1

Now For recursion:
We understand that we need to partition recursively the two halves created by the Partition function, but what's important is knowing when to stop.
We don't need to partition anymore the first partiton once i is smaller than the begining of the array that we want to sort, meaning that all values in the array are larger or equal than the pivot.
We don't need to partition anymore the second partiton once j is larger than the end of the array that we want to sort, meaning that all values in the array are smaller or equal than the pivot.

In Sudo Code:

function SortSubArray(Array A, int p, int r) {
	i, j = Partition(A, p,r);
	if(i>p) {
		SortSubArray(A,p,i);
	}
	if(j<r) {
		SortSubArray(A,j,r);
	}
}


Part 2
------

Here is the log output of the times different sorting algorithms take to sort different sized arrays:

QuickSorter Sorter Sort Speeds (picoseconds):

[10]: 2758
[50]: 6082
[100]: 14911
[1000]: 156285
[500000]: 94313817
[1000000]: 45341369

QuickCutOffSorter Sorter Sort Speeds (picoseconds):

[10]: 23543
[50]: 36887
[100]: 80502
[1000]: 711973
[500000]: 103718587
[1000000]: 48503821

MedianQuickSorter Sorter Sort Speeds (picoseconds):

[10]: 18011
[50]: 22772
[100]: 69311
[1000]: 467162
[500000]: 99304109
[1000000]: 40365931

ThreeWayQuickSort Sorter Sort Speeds (picoseconds):

[10]: 7630
[50]: 166804
[100]: 88961
[1000]: 649620
[500000]: 80488107
[1000000]: 38998807

MergeSorter Sorter Sort Speeds (picoseconds):

[10]: 9155
[50]: 43697
[100]: 98306
[1000]: 668410
[500000]: 135395906
[1000000]: 60183851

InsertSorter Sorter Sort Speeds (picoseconds):

[10]: 53382
[50]: 24584
[100]: 72613
[1000]: 1287430
[500000]: 399580005286
[1000000]: 27069061770

SelectionSorter Sorter Sort Speeds (picoseconds):

[10]: 29682
[50]: 64135
[100]: 208313
[1000]: 4401474
[500000]: 593299454742
[1000000]: 151529697544

To start off lets compare the time it took for the 4 algorithms created in part one to sort the 1 million element array

-Basic_QuickSort: 45.341369 milliseconds
-QuickSort_with_InsertSort_CutOff: 48.503821 milliseconds
-Median_Of_3_QuickSorter: 40.365931 milliseconds
-3_Way_QuickSort: 38.998807 milliseconds

We can see here 3_Way_QuickSort was the fastest, but not by much, something we would not have expected since 3_Way is designed for highly repetitive arrays. 
One would expect QuickSort_with_InsertSort_CutOff to be the fastest since insert sort is meant to be faster for small arrays, but here that is not the case.
As can be seen in the output log above, Insert Sort is not faster than any quicksort for any sized array.

When one compares any form of Quick Sort to insert or selection sort however the difference is obvious:
-Insertion_Sort: 27069.061770 milliseconds, 27 seconds!
-Selection_Sort: 151529.697544 milliseconds, 151 seconds!

These cuadratic time sorting algorythms took more than 675 times longer than any version of quick sort, and if you look at the 500 thousand element array with large integers, the time taken is almost 10 minutes!
Needless to say please don't make my selection sort sort the large arrays unless you really want to.
These results make sense since in algorythms like Insertion Sort, one performs two nested for loops, each taking O(n) time, therefore compined they take O(n^2).

Merge sort took 60.1 milliseconds to run, this is comparable to QuickSort algorythms, one 50% longer. And makes sense since Merge Sort is an algorythm of complexity O(n.log(n))


Part 3
------

Worst Case Scenarios can be created very easily for both Quick Sort And Median of 3 Quick Sort, as can be seen in my JUnit test file.
For standard quick sort, one only needs to create an ordered array. Quicksort grabs the last element of the array and partition the array into two around that value, and continues successively. 
Each iteration of the partition loop takes O(n) time, and since in this worst case scenario, each iteration of the Partition only sorts one element, the loop is done n times, therefore the complexity is O(n^2).
As can be seen in the output log of my JUnit test:
------------------------------------------
Quick Sorter Worst Case Scenario Analysis:
Normal Sorting Time: 50578
Worst Case Scenario Sorting Time: 685404
Speed Factor: 13
------------------------------------------

For median of 3, the same thing can be acheived by simply feeding a n sized arra, all of value 0. Same as for QuickSort. Each iteration only sorts one element, therefore performing n^2 iterations and degrading to a complexity of O(n^2).
Here are the output logs:
-------------------------------------------------
Median Quick Sorter Worst Case Scenario Analysis:
Normal Sorting Time: 47539
Worst Case Scenario Sorting Time: 1066484
Speed Factor: 22
-------------------------------------------------
One thing to note is that feeding a worst case scenario array to these two algorythms, creates a buffer overflow exception for arrays over 1000!
